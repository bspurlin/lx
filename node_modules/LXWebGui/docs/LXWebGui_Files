./
-> index.js is the "main" entry point for the application which links together the various library components and dependencies. The routes, scripts which tell the server what to do when receiving particular types of HTTP requests to different URI's in its namespcae, are linked with the URI that they serve in index.js. Additionally there is some functionality that sets up temporary directories the application will use and cleans these up after it closes. 

-> settings.js defines some global variables that are used throughout the application, most notably some relative file paths. Library components have an expectation of finding settings.js in its current location, so it shouldn't be moved unless absolutely necessary. 


./bin
-> boot.sh is a shell script that can start the application and open a file browser to the appropriate page for Linux based machines.
-> boot.bat is a batch script that does the same thing for Windows. 
-> setup.bat can be used to create a link to boot.bat on a Windows desktop. It calls createLink.vbs to do that. 

./test
-> This directory contains test descriptions and sample input for the tests. The tests themselves require mocha be installed globally on your system. See the file ./docs/testing.txt for more details. 



./lib
-> hbhelpers.js is a very thin wrapper around the handlebars module. It provides a single additional "helper" function at the moment, which is useful in creating some templates later on. 
-> ./middleware ; middleware is functionality that every single request that gets made to the server passed through and is potentially modified by. 
	-> mware.js exports a small middleware initialization function. Any middleware that you want to introduce to the application needs to be "registered" in this file. 
	-> mulware.js is a thin wrapper around the multer middleware. It provides functionality for accessing multipart form POST requests. 
-> ./routes
	-> index.js provides all of the route functions as attributes to its export object. It maps these attribute keys to the files that are present in the rest of the routes folder. This means we can change the name or location of a route file but still keep the calls static for the main app calls. It also keeps the main application file a bit easier to scan. 
	-> All other files in all other subdirectories here export route handlers. These scripts tell the server how to process incoming HTTP requests to particular URI's. The exports are in the form of functions with a function(request,response) signature. If a particular URI needs to handle multiple types of HTTP requesets (ex: both GET and POST) those are both stored in the same route file. The "all" and "save" subdirectories are just for organizational purposes; they hold the same types of files. 
	-> browser.js handles the browser route. The browser is a server-side file browser that allows a user to browse to a location in the file system and return a selected file path to the calling route for further use. 
	-> index.js handles the index route. The index is the main page that displays licensing information and further scanning options. 
	-> open.js handles the open route. It goes through the technical steps of creating a working copy of a JSON file that the user wants to open. 
	-> ./save/save.js handles the actual saving of files, both HTML reports and JSON scans. 
	-> ./save/options.js handles the HTML save options page, which presents different options that can be applied to an HTML report. 
	-> ./save/report.js handles the displaying of HTML reports. The user is never directed to the corresponding URI by the application itself, but the app uses the route to take advantage of the templating engine in creating HTML reports. 
	-> ./all/timer.js handles the inactivity timer. This timer functions by doing a graceful shutdown of the server process if the server doesn't receive any requests for a given period of time. The exact period is set in settings.js. 
-> ./views
	-> The html files contained in this folder are templates used by the templating engine to generate the HTML pages that are sent as responses to HTTP requests. The templating engine (handlebars) replaces the placeholder variables in these files with values tailored to the specific requests. 
-> ./resources
	-> resources.js exports a function that gets called by the main application to initialize the hosting of external resources. The generated HTML pages expect these resources to be available to link to for their use. Internally, resources.js contains an array of (local_path,remote_path) pairs. Local_path is the (relative) path to the file that will be hosted, and remote_path is the path relative to the domain name where the file will be available. Ex: {local_path: "/foo.js", remote_path: "/bar.js"} will instruct the server to respond to requests at localhost:8888/bar.js with the contents of the file "foo.js". 
	-> ./styles
		-> The files here are style sheets that are referenced by the HTML templates. 
	-> ./scripts
		-> The scripts here contain the active content for the pages they reference. It's important to note that the functionality of most pages relies both on this client-side JavaScript and the generated templates for full functionality. One or both of the JavaScript and HTML might need to be modified in order to change the existing functionality of a given page, in addition to modifying the route which